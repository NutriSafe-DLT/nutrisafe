#####################################################################################################################
# DESCRIPTION
# This file describes the configuration of the container for the ordering services, provided by the Unibw.
#
# 
# This work is licensed under a Creative Commons Attribution 4.0 International License
# (http://creativecommons.org/licenses/by/4.0/).
#
# Author(s): Tim Hoi√ü, Andreas Hermann
# NutriSafe Research Project
# Institute for Protection and Dependability
# Department of Computer Science
# Bundeswehr University Munich
#
# Original file (from https://github.com/hyperledger/fabric-samples) by IBM Corp:
# License SPDX-License-Identifier: Apache-2.0
#
#
######################################################################################################################


#####################################################################################################################
# Parameters                                                                                                        #
#####################################################################################################################

# -------------------------------------------------------------------------------------------------------------------
#   Section: Organizations
#   This section defines the different organizational identities which will be referenced later in the configuration.
# -------------------------------------------------------------------------------------------------------------------
Organizations:
    ### Here you should define the organisations which are part of the network ###
    - &Unibw
        ### Insert the organisation name here ###
        Name: Unibw

        ### Name of the organisational MSP ###
        ID: UnibwMSP

        ### MSPDir is the filesystem path which contains the MSP configuration ###
        MSPDir: ../creatingCryptoMaterial/crypto-config/ordererOrganizations/unibw.de/msp
       
       
        Policies: &UnibwPolicies
            Readers:
                Type: Signature
                Rule: "OR('UnibwMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
            Writers:
                Type: Signature
                Rule: "OR('UnibwMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
            Admins:
                Type: Signature
                Rule: "OR('UnibwMSP.admin')"
            Endorsement:
                Type: Signature
                Rule: "OR('UnibwMSP.member')"
                
        # OrdererEndpoints is a list of all orderers this org runs which clients
        # and peers may to connect to to push transactions and receive blocks respectively.
        OrdererEndpoints:
            - "orderer.unibw.de:7050"
            - "orderer1.unibw.de:7050"
            - "orderer2.unibw.de:7050"
        
    ### Here you should define the organisations which are part of the network ###   
    - &Deoni
        ### Insert the organisation name here ###
        Name: Deoni

        ### Name of the organisational MSP ###
        ID: DeoniMSP

        ### MSPDir is the filesystem path which contains the MSP configuration ###
        MSPDir: ../creatingCryptoMaterial/crypto-config/peerOrganizations/deoni.de/msp
        
        Policies: &DeoniPolicies
            Readers:
                Type: Signature
                Rule: "OR('DeoniMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
            Writers:
                Type: Signature
                Rule: "OR('DeoniMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
            Admins:
                Type: Signature
                Rule: "OR('DeoniMSP.admin')"
            Endorsement:
                Type: Signature
                Rule: "OR('DeoniMSP.member')"
        
        # AnchorPeers defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        AnchorPeers:
            - Host: peer0.deoni.de
              Port: 7051
    
    ### Here you should define the organisations which are part of the network ###   
    - &Salers
        ### Insert the organisation name here ###
        Name: Salers

        ### Name of the organisational MSP ###
        ID: SalersMSP

        ### MSPDir is the filesystem path which contains the MSP configuration ###
        MSPDir: ../creatingCryptoMaterial/crypto-config/peerOrganizations/salers.de/msp

        Policies: &SalersPolicies
            Readers:
                Type: Signature
                Rule: "OR('SalersMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
            Writers:
                Type: Signature
                Rule: "OR('SalersMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
            Admins:
                Type: Signature
                Rule: "OR('SalersMSP.admin')"
            Endorsement:
                Type: Signature
                Rule: "OR('SalersMSP.member')"

        # AnchorPeers defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        AnchorPeers:
            - Host: peer0.salers.de
              Port: 7061
        
    ### Here you should define the organisations which are part of the network ###   
    - &Brangus
        ### Insert the organisation name here ###
        Name: Brangus

        ### Name of the organisational MSP ###
        ID: BrangusMSP

        ### MSPDir is the filesystem path which contains the MSP configuration ###
        MSPDir: ../creatingCryptoMaterial/crypto-config/peerOrganizations/brangus.de/msp

        Policies: &BrangusPolicies
            Readers:
                Type: Signature
                Rule: "OR('BrangusMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
            Writers:
                Type: Signature
                Rule: "OR('BrangusMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
            Admins:
                Type: Signature
                Rule: "OR('BrangusMSP.admin')"
            Endorsement:
                Type: Signature
                Rule: "OR('BrangusMSP.member')"

        # AnchorPeers defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        AnchorPeers:
            - Host: peer0.brangus.de
              Port: 7071
        
    ### Here you should define the organisations which are part of the network ###   
    - &Pinzgauer
        ### Insert the organisation name here ###
        Name: Pinzgauer

        ### Name of the organisational MSP ###
        ID: PinzgauerMSP

        ### MSPDir is the filesystem path which contains the MSP configuration ###
        MSPDir: ../creatingCryptoMaterial/crypto-config/peerOrganizations/pinzgauer.de/msp

        Policies: &PinzgauerPolicies
            Readers:
                Type: Signature
                Rule: "OR('PinzgauerMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
            Writers:
                Type: Signature
                Rule: "OR('PinzgauerMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
            Admins:
                Type: Signature
                Rule: "OR('PinzgauerMSP.admin')"
            Endorsement:
                Type: Signature
                Rule: "OR('PinzgauerMSP.member')"

        # AnchorPeers defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        AnchorPeers:
            - Host: peer0.pinzgauer.de
              Port: 7081
        
    ### Here you should define the organisations which are part of the network ###   
    - &Tuxer
        ### Insert the organisation name here ###
        Name: Tuxer

        ### Name of the organisational MSP ###
        ID: TuxerMSP

        ### MSPDir is the filesystem path which contains the MSP configuration ###
        MSPDir: ../creatingCryptoMaterial/crypto-config/peerOrganizations/tuxer.de/msp
        
        Policies: &TuxerPolicies
            Readers:
                Type: Signature
                Rule: "OR('TuxerMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
            Writers:
                Type: Signature
                Rule: "OR('TuxerMSP.member')"
                # If your MSP is configured with the new NodeOUs, you might
                # want to use a more specific rule like the following:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
            Admins:
                Type: Signature
                Rule: "OR('TuxerMSP.admin')"
            Endorsement:
                Type: Signature
                Rule: "OR('TuxerMSP.member')"
        
        # AnchorPeers defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        AnchorPeers:
            - Host: peer0.tuxer.de
              Port: 7081


################################################################################
#
#   CAPABILITIES
#
#   This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
    # Channel capabilities apply to both the orderers and the peers and must be
    # supported by both.
    # Set the value of the capability to true to require it.
    Channel: &ChannelCapabilities
        # V2.0 for Channel is a catchall flag for behavior which has been
        # determined to be desired for all orderers and peers running at the v2.0.0
        # level, but which would be incompatible with orderers and peers from
        # prior releases.
        # Prior to enabling V2.0 channel capabilities, ensure that all
        # orderers and peers on a channel are at v2.0.0 or later.
        V2_0: true

    # Orderer capabilities apply only to the orderers, and may be safely
    # used with prior release peers.
    # Set the value of the capability to true to require it.
    Orderer: &OrdererCapabilities
        # V1.1 for Orderer is a catchall flag for behavior which has been
        # determined to be desired for all orderers running at the v1.1.x
        # level, but which would be incompatible with orderers from prior releases.
        # Prior to enabling V2.0 orderer capabilities, ensure that all
        # orderers on a channel are at v2.0.0 or later.
        V2_0: true

    # Application capabilities apply only to the peer network, and may be safely
    # used with prior release orderers.
    # Set the value of the capability to true to require it.
    Application: &ApplicationCapabilities
        # V2.0 for Application enables the new non-backwards compatible
        # features and fixes of fabric v2.0.
        # Prior to enabling V2.0 orderer capabilities, ensure that all
        # orderers on a channel are at v2.0.0 or later.
        V2_0: true


################################################################################
#
#   APPLICATION
#
#   This section defines the values to encode into a config transaction or
#   genesis block for application-related parameters.
#
################################################################################
Application: &ApplicationDefaults
    ACLs: &ACLsDefault
        # This section provides defaults for policies for various resources
        # in the system. These "resources" could be functions on system chaincodes
        # (e.g., "GetBlockByNumber" on the "qscc" system chaincode) or other resources
        # (e.g.,who can receive Block events). This section does NOT specify the resource's
        # definition or API, but just the ACL policy for it.
        #
        # Users can override these defaults with their own policy mapping by defining the
        # mapping under ACLs in their channel definition

        #---New Lifecycle System Chaincode (_lifecycle) function to policy mapping for access control--#

        # ACL policy for _lifecycle's "CheckCommitReadiness" function
        _lifecycle/CheckCommitReadiness: /Channel/Application/Writers

        # ACL policy for _lifecycle's "CommitChaincodeDefinition" function
        _lifecycle/CommitChaincodeDefinition: /Channel/Application/Writers

        # ACL policy for _lifecycle's "QueryChaincodeDefinition" function
        _lifecycle/QueryChaincodeDefinition: /Channel/Application/Readers

        # ACL policy for _lifecycle's "QueryChaincodeDefinitions" function
        _lifecycle/QueryChaincodeDefinitions: /Channel/Application/Readers

        #---Lifecycle System Chaincode (lscc) function to policy mapping for access control---#

        # ACL policy for lscc's "getid" function
        lscc/ChaincodeExists: /Channel/Application/Readers

        # ACL policy for lscc's "getdepspec" function
        lscc/GetDeploymentSpec: /Channel/Application/Readers

        # ACL policy for lscc's "getccdata" function
        lscc/GetChaincodeData: /Channel/Application/Readers

        # ACL Policy for lscc's "getchaincodes" function
        lscc/GetInstantiatedChaincodes: /Channel/Application/Readers

        #---Query System Chaincode (qscc) function to policy mapping for access control---#

        # ACL policy for qscc's "GetChainInfo" function
        qscc/GetChainInfo: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByNumber" function
        qscc/GetBlockByNumber: /Channel/Application/Readers

        # ACL policy for qscc's  "GetBlockByHash" function
        qscc/GetBlockByHash: /Channel/Application/Readers

        # ACL policy for qscc's "GetTransactionByID" function
        qscc/GetTransactionByID: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByTxID" function
        qscc/GetBlockByTxID: /Channel/Application/Readers

        #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

        # ACL policy for cscc's "GetConfigBlock" function
        cscc/GetConfigBlock: /Channel/Application/Readers

        # ACL policy for cscc's "GetConfigTree" function
        cscc/GetConfigTree: /Channel/Application/Readers

        # ACL policy for cscc's "SimulateConfigTreeUpdate" function
        cscc/SimulateConfigTreeUpdate: /Channel/Application/Readers

        #---Miscellaneous peer function to policy mapping for access control---#

        # ACL policy for invoking chaincodes on peer
        peer/Propose: /Channel/Application/Writers

        # ACL policy for chaincode to chaincode invocation
        peer/ChaincodeToChaincode: /Channel/Application/Readers

        #---Events resource to policy mapping for access control###---#

        # ACL policy for sending block events
        event/Block: /Channel/Application/Readers

        # ACL policy for sending filtered block events
        event/FilteredBlock: /Channel/Application/Readers

    # Organizations lists the orgs participating on the application side of the
    # network.
    Organizations:

    # Policies defines the set of policies at this level of the config tree
    # For Application policies, their canonical path is
    #   /Channel/Application/<PolicyName>
    Policies: &ApplicationDefaultPolicies
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "MAJORITY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "MAJORITY Endorsement"
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"

    # Capabilities describes the application level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *ApplicationCapabilities


# -------------------------------------------------------------------------------------------------------------------
#   Section: Orderer
#   This section defines the values to encode into a config transaction or genesis block for orderer 
#   related parameters
# -------------------------------------------------------------------------------------------------------------------
Orderer: &OrdererDefaults

    # Orderer Type: The orderer implementation to start, available types are "solo" and "kafka" #
    OrdererType: etcdraft


    # Batch Timeout: The amount of time to wait before creating a batch #
    BatchTimeout: 2s

    # Batch Size: Controls the number of messages batched into a block #
    BatchSize:

        # Max Message Count: The maximum number of messages to permit in a batch #
        MaxMessageCount: 10

        # Absolute Max Bytes: The absolute maximum number of bytes allowed forthe serialized messages in a batch. #
        AbsoluteMaxBytes: 99 MB

        # Preferred Max Bytes: The preferred maximum number of bytes allowed for the serialized messages in a batch. # 
        # A message larger than the preferred max bytes will result in a batch larger than preferred max bytes. #
        PreferredMaxBytes: 512 KB

    # EtcdRaft defines configuration which must be set when the "etcdraft"
    # orderertype is chosen.
    EtcdRaft:
        # The set of Raft replicas for this network. For the etcd/raft-based
        # implementation, we expect every replica to also be an OSN. Therefore,
        # a subset of the host:port items enumerated in this list should be
        # replicated under the Orderer.Addresses key above.
        Consenters:
            - Host: orderer.unibw.de
              Port: 7050
              ClientTLSCert: ../creatingCryptoMaterial/crypto-config/ordererOrganizations/unibw.de/orderers/orderer.unibw.de/tls/server.crt
              ServerTLSCert: ../creatingCryptoMaterial/crypto-config/ordererOrganizations/unibw.de/orderers/orderer.unibw.de/tls/server.crt
            - Host: orderer1.unibw.de
              Port: 7050
              ClientTLSCert: ../creatingCryptoMaterial/crypto-config/ordererOrganizations/unibw.de/orderers/orderer1.unibw.de/tls/server.crt
              ServerTLSCert: ../creatingCryptoMaterial/crypto-config/ordererOrganizations/unibw.de/orderers/orderer1.unibw.de/tls/server.crt
            - Host: orderer2.unibw.de
              Port: 7050
              ClientTLSCert: ../creatingCryptoMaterial/crypto-config/ordererOrganizations/unibw.de/orderers/orderer2.unibw.de/tls/server.crt
              ServerTLSCert: ../creatingCryptoMaterial/crypto-config/ordererOrganizations/unibw.de/orderers/orderer2.unibw.de/tls/server.crt

        # Options to be specified for all the etcd/raft nodes. The values here
        # are the defaults for all new channels and can be modified on a
        # per-channel basis via configuration updates.
        Options:
            # TickInterval is the time interval between two Node.Tick invocations.
            TickInterval: 500ms

            # ElectionTick is the number of Node.Tick invocations that must pass
            # between elections. That is, if a follower does not receive any
            # message from the leader of current term before ElectionTick has
            # elapsed, it will become candidate and start an election.
            # ElectionTick must be greater than HeartbeatTick.
            ElectionTick: 10

            # HeartbeatTick is the number of Node.Tick invocations that must
            # pass between heartbeats. That is, a leader sends heartbeat
            # messages to maintain its leadership every HeartbeatTick ticks.
            HeartbeatTick: 1

            # MaxInflightBlocks limits the max number of in-flight append messages
            # during optimistic replication phase.
            MaxInflightBlocks: 5

            # SnapshotIntervalSize defines number of bytes per which a snapshot is taken
            SnapshotIntervalSize: 20 MB

    # Policies defines the set of policies at this level of the config tree
    # For Orderer policies, their canonical path is
    #   /Channel/Orderer/<PolicyName>
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"
        # BlockValidation specifies what signatures must be included in the block
        # from the orderer for the peer to validate it.
        BlockValidation:
            Type: ImplicitMeta
            Rule: "ANY Writers"

    # Organizations is the list of orgs which are defined as participants on the orderer side of the network #
    Organizations:
            
    # Capabilities describes the orderer level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *OrdererCapabilities
            
################################################################################
#
#   CHANNEL
#
#   This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
################################################################################
Channel: &ChannelDefaults

    # Policies defines the set of policies at this level of the config tree
    # For Channel policies, their canonical path is
    #   /Channel/<PolicyName>
    Policies:
        # Who may invoke the 'Deliver' API
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        # Who may invoke the 'Broadcast' API
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        # By default, who may modify elements at this config level
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"

    # Capabilities describes the channel level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *ChannelCapabilities

# -------------------------------------------------------------------------------------------------------------------
#   Section: Profiles
#   Different configuration profiles may be encoded here to be specified as parameters to the configtxgen tool
# -------------------------------------------------------------------------------------------------------------------
Profiles:

    OneOrgOrdererGenesis:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: etcdraft
            Organizations:
            ### Reference to the organisation section ###
                - <<: *Unibw
        Consortiums:
            SampleConsortium:
                Organizations:
                ### Reference to the organisation section ###
                    
    MoreOrgChannel:
        <<: *ChannelDefaults
        Consortium: SampleConsortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *Deoni
